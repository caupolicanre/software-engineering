[project]
name = "gamify"
version = "1.0.0"
description = "Gamify is a web and mobile application designed to help people organize their daily tasks in a motivating way."
authors = [
    { name = "Caupolicán Ré", email = "caupolicanre@gmail.com" },
    { name = "Felipe Carrozzo", email = "felipe.carrozzo@ingenieria.uner.edu.ar" },
]
readme = "README.md"
keywords = ["python", "gamification", "task management"]
requires-python = "==3.13.5"
classifiers = [
    "Intended Audience :: Developers",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.13",
    "Topic :: Software Development",
]

[project.urls]
Homepage = "https://caupolicanre.github.io/gamify/"
Repository = "https://github.com/caupolicanre/gamify/"
Documentation = "https://caupolicanre.github.io/gamify/"

[dependency-groups]
dev = [
    "coverage==7.10.2",
    "deptry==0.23.1",
    "mkdocs==1.6.1",
    "pre-commit==4.2.0",
    "pytest==8.4.1",
    "pytest-cookies==0.2.0",
    "ruff==0.12.8",
    "ty==0.0.1a17",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"


[tool.ty.environment]
python = "./.venv"


[tool.ruff]
indent-width = 4
line-length = 140

[tool.ruff.format]
indent-style = "space"
quote-style = "double"

[tool.ruff.lint]
extend-select = [
    # flake8
    "ANN",      # Annotations
    "ASYNC",    # Async
    "S",        # Security
    "BLE",      # Blind Exception
    "FBT",      # Boolean Trap
    "B",        # Bugbear
    "A",        # Builtins
    "COM",      # Commas
    "C4",       # Comprehensions
    "DTZ",      # DateTime Zone
    "T10",      # Debugger
    "DJ",       # Django
    "EM",       # Error Messages
    "FIX",      # Fix Me
    "INT",      # gettext
    "ISC",      # Implicit str Concat
    "ICN",      # Import Conventions
    "LOG",      # Logging
    "G",        # Logging Format
    "INP",      # No PEP 420
    "PIE",      # Miscellaneous Lints
    "T20",      # Print
    "PYI",      # Type Hinting Specializations
    "PT",       # Pytest Style
    "Q",        # Quotes
    "RSE",      # Raise
    "RET",      # Return
    "SLF",      # Self
    "SIM",      # Simplify
    "SLOT",     # Slots
    "TID",      # Tidier Imports
    "TD",       # TODOs
    "TC",       # Type Checking
    "ARG",      # Unused Arguments
    "PTH",      # Use Pathlib

    # Flynt
    "FLY",      # Replace string formatting with f-strings

    # isort
    "I",        # Imports

    # mccabe
    "C90",      # Complex Structure

    # NumPy
    "NPY",

    # Pandas
    "PD",

    # PEP 8
    "N",        # Naming

    # Perflint
    "PERF",     # Performance

    # pycodestyle
    "E",        # Error
    "W",        # Warning

    # pydoclint
    "DOC",      # Docstring

    # pydocstyle
    "D",        # Docstring

    # Pyflakes
    "F",

    # Pylint
    "PL",       # PyLint
    #"PLC",     # Convention
    #"PLE",     # Error
    #"PLR",     # Refactor
    #"PLW",     # Warning

    # pyupgrade
    "UP",

    # refurb
    "FURB",     # Refurbish

    # Ruff
    "RUF",

    # tryceratops
    "TRY",      # Prevent Exception Handling AntiPatterns
]
ignore = [
    # Boolean Trap
    "FBT001",   # Boolean-typed positional argument in function definition

    # Print
    "T201",     # Print statements

    # TODO
    "TD001",    # Invalid TODO tag
    "TD002",    # Missing author in TODO
    "TD003",    # Missing issue link for this TODO

    # pydocstyle
    "D100",     # Missing docstring in public module
    "D212",     # Multi-line docstring summary should start at the first line
]
typing-extensions = false
logger-objects = []

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true

[tool.ruff.lint.flake8-import-conventions]
banned-from = []

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"
inline-quotes = "double"
multiline-quotes = "double"

[tool.ruff.lint.flake8-unused-arguments]
ignore-variadic-names = true

[tool.ruff.lint.pycodestyle]
ignore-overlong-task-comments = true

[tool.ruff.lint.isort]
lines-after-imports = 2
